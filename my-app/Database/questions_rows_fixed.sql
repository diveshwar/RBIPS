INSERT INTO "public"."questions" ("id", "question", "type", "options", "correct_answer", "starting_code", "test_cases", "created_at", "updated_at") VALUES
('5', 'What is the time complexity of binary search?', 'mcq', '["O(n)","O(log n)","O(n log n)","O(n²)"]', 'O(log n)', null, null, '2025-03-15 17:02:37.364418+00', '2025-03-15 17:02:37.364418+00'),
('6', 'Which data structure follows the Last In First Out (LIFO) principle?', 'mcq', '["Queue","Stack","Linked List","Binary Tree"]', 'Stack', null, null, '2025-03-15 17:02:37.364418+00', '2025-03-15 17:02:37.364418+00'),
('7', 'Two Sum Problem\n\nGiven an array of integers nums and an integer target, return indices of the two numbers in nums such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.\n\nExample 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\nExample 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\nExplanation: Because nums[1] + nums[2] == 6, we return [1, 2].\n\nConstraints:\n• 2 <= nums.length <= 104\n• -109 <= nums[i] <= 109\n• -109 <= target <= 109\n• Only one valid answer exists\n\nFollow-up: Can you come up with an algorithm that is less than O(n²) time complexity?', 'coding', null, null, '/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nfunction twoSum(nums, target) {\n    // Write your solution here\n    \n}', '[{"input":[[2,7,11,15],9],"explanation":"nums[0] + nums[1] = 2 + 7 = 9","expectedOutput":[0,1]},{"input":[[3,2,4],6],"explanation":"nums[1] + nums[2] = 2 + 4 = 6","expectedOutput":[1,2]},{"input":[[3,3],6],"explanation":"nums[0] + nums[1] = 3 + 3 = 6","expectedOutput":[0,1]}]', '2025-03-15 17:02:37.364418+00', '2025-03-15 17:02:37.364418+00'),
('8', 'Valid Parentheses\n\nGiven a string s containing just the characters ''('', '')'', ''{'', ''}'', ''['', and '']'', determine if the input string is valid.\n\nAn input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.\n\nExample 1:\nInput: s = "()"\nOutput: true\nExplanation: Single pair of valid parentheses.\n\nExample 2:\nInput: s = "()[]{}"\nOutput: true\nExplanation: Each opening bracket is closed by the same type.\n\nExample 3:\nInput: s = "(]"\nOutput: false\nExplanation: The close bracket '']'' cannot match with open bracket ''(''.\n\nConstraints:\n• 1 <= s.length <= 104\n• s consists of parentheses only ''()[]{}''', 'coding', null, null, '/**\n * @param {string} s\n * @return {boolean}\n */\nfunction isValid(s) {\n    // Write your solution here\n    \n}', '[{"input":["()"],"explanation":"Simple valid pair of parentheses","expectedOutput":true},{"input":["()[]{}"],"explanation":"Multiple valid pairs","expectedOutput":true},{"input":["(]"],"explanation":"Mismatched brackets","expectedOutput":false},{"input":["([)]"],"explanation":"Incorrectly ordered closing brackets","expectedOutput":false},{"input":["{[]}"],"explanation":"Nested brackets closed in correct order","expectedOutput":true}]', '2025-03-15 17:02:37.364418+00', '2025-03-15 17:02:37.364418+00'); 